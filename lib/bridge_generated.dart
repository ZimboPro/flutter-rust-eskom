// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<Platform> platform({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_platform(port_),
      parseSuccessData: _wire2api_platform,
      constMeta: kPlatformConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlatformConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "platform",
        argNames: [],
      );

  Future<bool> rustReleaseMode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_rust_release_mode(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kRustReleaseModeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_release_mode",
        argNames: [],
      );

  Stream<int> tick({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_tick(port_),
      parseSuccessData: _wire2api_usize,
      constMeta: kTickConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTickConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tick",
        argNames: [],
      );

  Future<bool> testApiKey({required String api, dynamic hint}) {
    var arg0 = _platform.api2wire_String(api);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_api_key(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kTestApiKeyConstMeta,
      argValues: [api],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestApiKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_api_key",
        argNames: ["api"],
      );

  Future<AllowanceUsage> allowance({required String api, dynamic hint}) {
    var arg0 = _platform.api2wire_String(api);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_allowance(port_, arg0),
      parseSuccessData: _wire2api_allowance_usage,
      constMeta: kAllowanceConstMeta,
      argValues: [api],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAllowanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "allowance",
        argNames: ["api"],
      );

  Future<List<AreaSearchResult>> areaSearch(
      {required String api, required String searchTerm, dynamic hint}) {
    var arg0 = _platform.api2wire_String(api);
    var arg1 = _platform.api2wire_String(searchTerm);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_area_search(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_area_search_result,
      constMeta: kAreaSearchConstMeta,
      argValues: [api, searchTerm],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAreaSearchConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "area_search",
        argNames: ["api", "searchTerm"],
      );

  Future<AreaInfoResponse> areaInfo(
      {required String api, required String areaId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(api);
    var arg1 = _platform.api2wire_String(areaId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_area_info(port_, arg0, arg1),
      parseSuccessData: _wire2api_area_info_response,
      constMeta: kAreaInfoConstMeta,
      argValues: [api, areaId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAreaInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "area_info",
        argNames: ["api", "areaId"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  AllowanceUsage _wire2api_allowance_usage(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AllowanceUsage(
      limit: _wire2api_i64(arr[0]),
      count: _wire2api_i64(arr[1]),
      accountType: _wire2api_String(arr[2]),
    );
  }

  AreaInfoResponse _wire2api_area_info_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AreaInfoResponse(
      events: _wire2api_list_event(arr[0]),
      info: _wire2api_info(arr[1]),
      schedule: _wire2api_schedule(arr[2]),
    );
  }

  AreaSearchResult _wire2api_area_search_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AreaSearchResult(
      areaId: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      region: _wire2api_String(arr[2]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  Day _wire2api_day(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Day(
      date: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      stages: _wire2api_list_StringList(arr[2]),
    );
  }

  Event _wire2api_event(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Event(
      end: _wire2api_String(arr[0]),
      note: _wire2api_String(arr[1]),
      start: _wire2api_String(arr[2]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  Info _wire2api_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Info(
      name: _wire2api_String(arr[0]),
      region: _wire2api_String(arr[1]),
    );
  }

  List<List<String>> _wire2api_list_StringList(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_StringList).toList();
  }

  List<AreaSearchResult> _wire2api_list_area_search_result(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_area_search_result).toList();
  }

  List<Day> _wire2api_list_day(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_day).toList();
  }

  List<Event> _wire2api_list_event(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_event).toList();
  }

  Platform _wire2api_platform(dynamic raw) {
    return Platform.values[raw as int];
  }

  Schedule _wire2api_schedule(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Schedule(
      days: _wire2api_list_day(arr[0]),
      source: _wire2api_String(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_platform(
    int port_,
  ) {
    return _wire_platform(
      port_,
    );
  }

  late final _wire_platformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_platform');
  late final _wire_platform =
      _wire_platformPtr.asFunction<void Function(int)>();

  void wire_rust_release_mode(
    int port_,
  ) {
    return _wire_rust_release_mode(
      port_,
    );
  }

  late final _wire_rust_release_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_release_mode');
  late final _wire_rust_release_mode =
      _wire_rust_release_modePtr.asFunction<void Function(int)>();

  void wire_tick(
    int port_,
  ) {
    return _wire_tick(
      port_,
    );
  }

  late final _wire_tickPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_tick');
  late final _wire_tick = _wire_tickPtr.asFunction<void Function(int)>();

  void wire_test_api_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> api,
  ) {
    return _wire_test_api_key(
      port_,
      api,
    );
  }

  late final _wire_test_api_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_test_api_key');
  late final _wire_test_api_key = _wire_test_api_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_allowance(
    int port_,
    ffi.Pointer<wire_uint_8_list> api,
  ) {
    return _wire_allowance(
      port_,
      api,
    );
  }

  late final _wire_allowancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_allowance');
  late final _wire_allowance = _wire_allowancePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_area_search(
    int port_,
    ffi.Pointer<wire_uint_8_list> api,
    ffi.Pointer<wire_uint_8_list> search_term,
  ) {
    return _wire_area_search(
      port_,
      api,
      search_term,
    );
  }

  late final _wire_area_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_area_search');
  late final _wire_area_search = _wire_area_searchPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_area_info(
    int port_,
    ffi.Pointer<wire_uint_8_list> api,
    ffi.Pointer<wire_uint_8_list> area_id,
  ) {
    return _wire_area_info(
      port_,
      api,
      area_id,
    );
  }

  late final _wire_area_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_area_info');
  late final _wire_area_info = _wire_area_infoPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
